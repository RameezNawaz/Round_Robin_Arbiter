module RR_Arbiter #(
    parameter N = 4 // Number of requesters
)(
    input clk,
    input rst,
    input ack,                 // Acknowledgment signal for granted access
    input [N-1:0] request,     // Requests from N requesters
    output reg [N-1:0] grant   // Grant signal for N requesters
);

    reg [$clog2(N)-1:0] current_index; // Tracks the current requester
    reg [N-1:0] priority;              // Priority mask for Round-Robin order

    // Priority initialization and management
    initial priority = 1;

    always @(posedge clk or posedge rst) begin
        if (rst) begin
            grant <= 0;
            current_index <= 0;
            priority <= 1;
        end else if (ack || !|grant) begin
            // Check for active requests in cyclic order based on priority
            integer i;
            grant = 0;
            for (i = 0; i < N; i = i + 1) begin
                current_index = (current_index + 1) % N;
                if (request[current_index]) begin
                    grant[current_index] = 1;
                    priority <= priority << 1 | priority[N-1]; // Shift priority mask
                    break;
                end
            end
        end
    end

endmodule




/*
input [3:0] request,
input clk,
input rst,
input ack,,
output [3:0] grant);

reg [3:0] shift_req;
reg [1:0] ptr,ns;

parameter: I1=2'b00,I2=2'b01,I3=2'b10,I4=2'b11;

always@(posedge clk)
   begin
	if(rst)
	  ptr<=0;
	  else 
	  ptr<=ns;
	  end

always@(ptr)
    begin
	 
	  case(ptr)
	     I0:begin 
		   shift_req[3:0]=request[3:0];
		   if(shift_req[0]==1)
			grant[0]=1;
		  else 
		   grant[0]=0; 
			ns<=I1;
		   end
			
		  I1:begin 
		   shift_req[3:0]={request[0],request[3:1]}; 
			if(shift_req[0]==1)
			grant[1]=1;
		  else 
		   grant[1]=0;
		   ns<=I2;	
		   end
			
		  I2:begin 
		   shift_req[3:0]={request[1:0],request[3:2]};
		if(shift_req[0]==1)
			grant[2]=1;
		  else 
		   grant[2]=0; 
			ns<=I3;
		   end	
			
		  I3:begin 
		   shift_req[3:0]={request[2:0],request[3]};
		if(shift_req[0]==1)
			grant[3]=1;
		  else 
		   grant[3]=0;
		    ns<=I0;	
		   end	
			endcase*/
	   